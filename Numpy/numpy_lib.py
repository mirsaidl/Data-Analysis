# -*- coding: utf-8 -*-
"""numpy_lib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TeeFmN5RutuaIHfch3xjzfy_jBrgfiif

Numpy Library
"""

import numpy as np

my_list = list(range(100000)) # Normal list
my_array = np.array(range(10000)) # Numpy array

# Commented out IPython magic to ensure Python compatibility.
# %time for _ in range(10): [x*2 for x in my_list] # Time for normal list

# Commented out IPython magic to ensure Python compatibility.
# %time for _ in range(10): my_array*2 # Vectorization

"""**Array Function**

"""

data1 = [[1,2,5,3], [12,7,8,3],[1,2.3,55,23]]
arr1 = np.array(data1)

arr1

arr1.ndim # help to find 'size' of array

"""**Shape** **Function**"""

arr1.shape # return result as a tuple

arr1.size # all elements size

# 3 is a rows
# 4 is a columns that we have
arr1.shape[1]

"""**Zeros and Ones Function**"""

arr2 = np.zeros((3,4)) # generate matrix with zeros with the shape of (3,4)
print(arr2)

arr3 = np.ones((3,4))
print(arr3)

"""**Arange Function**"""

arr4 = np.arange(4, 30 , 3) # this mean generate array numbers from 4 to 30 with difference 3
print(arr4)

arr5 = np.arange(30) # automatically starts from 0
print(arr5)

rshape = np.arange(0,9,1).reshape(3,3) # reshapes the deminsion
rshape[2, :2]

"""**Random, Randint Functions**"""

arr6 = np.random.rand(2,4) # creates randomly generated matrix (0~1) with shape of (2,4)
arr6

arr7 = np.random.randint(90,100, size=(2,4)) # randomly creates from 90 (low), to 100 (highest) and size
arr7

arr8 = np.random.randn(2, 4) # (2, 4) shape --> elements (Normal dist)
arr8

arr9 = np.random.randint(1000, size=(0,1))
arr9.ndim

"""**Dtype and astype**"""

arr_a = np.array([1,2,3], dtype= np.int8)
arr_a

arr_b = np.array([1,2,3], dtype=np.float64)
arr_b

arr_a.dtype

float_arr_a = arr_a.astype(np.float64)
float_arr_a

"""When turning from float to integer pay attention to data loss"""

arr_c = np.array([3.3, 2.4, 5.7]) # float 64
int_arr_c = arr_c.astype(np.int64)
int_arr_c

"""**COPY**"""

arr_d = np.arange(10,100,10)
arr_d

#sliced_arr = arr_d[3:5]
#sliced_arr[:] = 0
#print(sliced_arr)
#print(arr_d)   without copy it affects array itself

sliced_arr1 = arr_d[3:5].copy()
sliced_arr1[:] = 0
print(sliced_arr1)
print(arr_d)

"""**Boolen** **Index**"""

names = np.array(['Mirsaid', 'Asadbek', 'Doston', 'Mironshoh', 'Mirsaid'])
names

data = np.random.randn(5,4)
data

names == 'Mirsaid'

data[names == 'Mirsaid']

data[names == 'Mirsaid', 2:]
# last 2 infos about Mirsaid

data[names != 'Mirsaid']

data[~(names == 'Mirsaid')] # ~ is !=

mask = (names == 'Mirsaid') | (names == 'Mironshoh') # | is or
mask

data[mask]

data[data<0] = 0 # elements that is small than 0
data

arr = np.random.randint(0,9, size=(3,3))
arr

"""**Reshape, Transpose, Swapping Axes**"""

A = np.arange(6).reshape(3,2)
A

A.T # transposed max: 2d

A.swapaxes(1,0) # used any deminsional arrays

np.dot(A,A.T) # multiplication