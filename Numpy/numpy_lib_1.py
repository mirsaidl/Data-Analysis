# -*- coding: utf-8 -*-
"""numpy_lib_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MYapxvyRO59LciQ4oYyJ3XhcIqYViWGU
"""

import numpy as np

"""**Universal** **functions**"""

arr = np.arange(10)
arr

#Exponention
np.exp(arr)

# Square root
np.sqrt(arr)

# Log e
np.log(arr[1:])

# Square
np.square(arr)

# Modf divides two parts reminder and natural number
arr1 = np.random.randn(10)
arr1

reminder, number = np.modf(arr1)
print(reminder)
print(number)

# Sign return 1 if number is n>0 and -1 if n<0
np.sign(arr1)

# isnan return True if values is Nan
arr1[0] = np.NAN
arr1

np.isnan(arr1)

"""**Where**"""

arr_a = np.array([1.1,1.2,1.3,1.4])
arr_b = np.array([2.1,2.2,2.3,2.4])
cond = np.array([True,True,False,True])
result = np.where(cond,arr_a,arr_b) # if cond is True get from arr_a if False get from arr_b
result

arr_c = np.random.randint(-10,10, size=(3,3))
result1 = np.where(arr_c>0,1,-1) # if number is n>0 return 1 otherwise -1
result1

"""**Statistics**"""

arr_d = np.random.randint(-100,100, size=(3,3))
arr_d

arr_d.sum() # np.sum(arr_d) is okay too

print(arr_d.sum(axis=1)) # row-sum
print(arr_d.sum(axis=0)) # column-sum

arr_d.mean() # np.mean(arr_d) is okay too

print(arr_d.mean(axis=1)) # row-mean
print(arr_d.mean(axis=0)) # column-mean

#cumsum
arr_d.cumsum()
# summation steps